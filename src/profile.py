import numpy as np

class Profile:
    "To be added. Right now the code uses profiles generated by CORSIKA."
    
    def __init__(self, X_in, N_in, _atmo_X, _atmo_h, tmin, tmax):
        
        self.X = None
        self.N = None
        self.t = None
        self.profile = None
        self.tmask = None
        
        self.get_profile(X_in, N_in, _atmo_X, _atmo_h, tmin, tmax)
        
        return    
    
    
    @property
    def params2dict(self):
        resu = {}
        keys = ["X", "t", "N"]
        
        for i,key in enumerate(keys):
            resu[key] = self.profile[i]    
        resu["tmask"] = self.tmask    
        
        return resu
    
    
    def get_profile(self, X_in, N_in, _atmo_X, _atmo_h, tmin, tmax):
        """
        Calculates model profile by interpolating the input profile.
        Model paramter t is given by (X-Xmax)/X0 and describes the
        relative evolution stage.
        """

        X0 = 36.7
        # Interpolate input profile
        N = np.interp(_atmo_X, X_in, N_in)
        # Get Xmax
        Xmax_index = np.argmax(N)
        Xmax = _atmo_X[Xmax_index]
        t = (_atmo_X - Xmax)/X0
        # We only simulate tmin/tmax radiation lengths before/after Xmax
        mask = ((t > tmin) & (t < tmax))

        self.t = t[mask].astype(float)
        self.N = N[mask].astype(float) 
        self.X = _atmo_X[mask].astype(float)
        self.tmask = mask
        self.profile = np.vstack((self.X, self.t, self.N))

        return 
